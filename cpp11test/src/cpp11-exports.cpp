// Generated by cpp11: do not edit by hand

#include "cpp11/declarations.hpp"
#include <Rcpp.h>
using namespace Rcpp;

// add.cpp
SEXP cpp11_add_vec_for_(cpp11::writable::doubles x, double num);
extern "C" SEXP _cpp11test_cpp11_add_vec_for_(SEXP x, SEXP num) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11_add_vec_for_(cpp11::unmove(cpp11::as_cpp<cpp11::writable::doubles>(x)), cpp11::unmove(cpp11::as_cpp<double>(num))));
  END_CPP11
}
// data_frame.cpp
SEXP data_frame_();
extern "C" SEXP _cpp11test_data_frame_() {
  BEGIN_CPP11
    return cpp11::as_sexp(data_frame_());
  END_CPP11
}
// grow.cpp
cpp11::writable::doubles grow_(R_xlen_t n);
extern "C" SEXP _cpp11test_grow_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(grow_(cpp11::unmove(cpp11::as_cpp<R_xlen_t>(n))));
  END_CPP11
}
// insert.cpp
SEXP cpp11_insert_(SEXP num_sxp);
extern "C" SEXP _cpp11test_cpp11_insert_(SEXP num_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11_insert_(cpp11::unmove(cpp11::as_cpp<SEXP>(num_sxp))));
  END_CPP11
}
// matrix.cpp
SEXP gibbs_cpp(int N, int thin);
extern "C" SEXP _cpp11test_gibbs_cpp(SEXP N, SEXP thin) {
  BEGIN_CPP11
    return cpp11::as_sexp(gibbs_cpp(cpp11::unmove(cpp11::as_cpp<int>(N)), cpp11::unmove(cpp11::as_cpp<int>(thin))));
  END_CPP11
}
// matrix.cpp
cpp11::doubles_matrix gibbs_cpp2(int N, int thin);
extern "C" SEXP _cpp11test_gibbs_cpp2(SEXP N, SEXP thin) {
  BEGIN_CPP11
    return cpp11::as_sexp(gibbs_cpp2(cpp11::unmove(cpp11::as_cpp<int>(N)), cpp11::unmove(cpp11::as_cpp<int>(thin))));
  END_CPP11
}
// matrix.cpp
NumericMatrix gibbs_rcpp(int N, int thin);
extern "C" SEXP _cpp11test_gibbs_rcpp(SEXP N, SEXP thin) {
  BEGIN_CPP11
    return cpp11::as_sexp(gibbs_rcpp(cpp11::unmove(cpp11::as_cpp<int>(N)), cpp11::unmove(cpp11::as_cpp<int>(thin))));
  END_CPP11
}
// matrix.cpp
NumericMatrix gibbs_rcpp2(int N, int thin);
extern "C" SEXP _cpp11test_gibbs_rcpp2(SEXP N, SEXP thin) {
  BEGIN_CPP11
    return cpp11::as_sexp(gibbs_rcpp2(cpp11::unmove(cpp11::as_cpp<int>(N)), cpp11::unmove(cpp11::as_cpp<int>(thin))));
  END_CPP11
}
// release.cpp
void cpp11_release_(int n);
extern "C" SEXP _cpp11test_cpp11_release_(SEXP n) {
  BEGIN_CPP11
    cpp11_release_(cpp11::unmove(cpp11::as_cpp<int>(n)));
  return R_NilValue;
  END_CPP11
}
// release.cpp
void rcpp_release_(int n);
extern "C" SEXP _cpp11test_rcpp_release_(SEXP n) {
  BEGIN_CPP11
    rcpp_release_(cpp11::unmove(cpp11::as_cpp<int>(n)));
  return R_NilValue;
  END_CPP11
}
// safe.cpp
SEXP cpp11_safe_(SEXP x_sxp);
extern "C" SEXP _cpp11test_cpp11_safe_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11_safe_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum_int.cpp
int sum_int_for_(cpp11::integers x);
extern "C" SEXP _cpp11test_sum_int_for_(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_int_for_(cpp11::unmove(cpp11::as_cpp<cpp11::integers>(x))));
  END_CPP11
}
// sum_rcpp.cpp
SEXP rcpp_sum_dbl_for_(SEXP x_sxp);
extern "C" SEXP _cpp11test_rcpp_sum_dbl_for_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_sum_dbl_for_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum_rcpp.cpp
SEXP rcpp_sum_dbl_foreach_(SEXP x_sxp);
extern "C" SEXP _cpp11test_rcpp_sum_dbl_foreach_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_sum_dbl_foreach_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum_rcpp.cpp
SEXP rcpp_sum_dbl_accumulate_(SEXP x_sxp);
extern "C" SEXP _cpp11test_rcpp_sum_dbl_accumulate_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_sum_dbl_accumulate_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum_rcpp.cpp
SEXP rcpp_grow_(SEXP n_sxp);
extern "C" SEXP _cpp11test_rcpp_grow_(SEXP n_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_grow_(cpp11::unmove(cpp11::as_cpp<SEXP>(n_sxp))));
  END_CPP11
}
// sum.cpp
double sum_dbl_for_(cpp11::doubles x);
extern "C" SEXP _cpp11test_sum_dbl_for_(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_for_(cpp11::unmove(cpp11::as_cpp<cpp11::doubles>(x))));
  END_CPP11
}
// sum.cpp
double sum_dbl_for2_(SEXP x_sxp);
extern "C" SEXP _cpp11test_sum_dbl_for2_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_for2_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum.cpp
double sum_dbl_for3_(SEXP x_sxp);
extern "C" SEXP _cpp11test_sum_dbl_for3_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_for3_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum.cpp
double sum_dbl_foreach_(cpp11::doubles x);
extern "C" SEXP _cpp11test_sum_dbl_foreach_(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_foreach_(cpp11::unmove(cpp11::as_cpp<cpp11::doubles>(x))));
  END_CPP11
}
// sum.cpp
double sum_dbl_foreach2_(SEXP x_sxp);
extern "C" SEXP _cpp11test_sum_dbl_foreach2_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_foreach2_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}
// sum.cpp
double sum_dbl_accumulate_(cpp11::doubles x);
extern "C" SEXP _cpp11test_sum_dbl_accumulate_(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_accumulate_(cpp11::unmove(cpp11::as_cpp<cpp11::doubles>(x))));
  END_CPP11
}
// sum.cpp
double sum_dbl_accumulate2_(SEXP x_sxp);
extern "C" SEXP _cpp11test_sum_dbl_accumulate2_(SEXP x_sxp) {
  BEGIN_CPP11
    return cpp11::as_sexp(sum_dbl_accumulate2_(cpp11::unmove(cpp11::as_cpp<SEXP>(x_sxp))));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _cpp11test_cpp11_add_vec_for_(SEXP, SEXP);
extern SEXP _cpp11test_cpp11_insert_(SEXP);
extern SEXP _cpp11test_cpp11_release_(SEXP);
extern SEXP _cpp11test_cpp11_safe_(SEXP);
extern SEXP _cpp11test_data_frame_();
extern SEXP _cpp11test_gibbs_cpp(SEXP, SEXP);
extern SEXP _cpp11test_gibbs_cpp2(SEXP, SEXP);
extern SEXP _cpp11test_gibbs_rcpp(SEXP, SEXP);
extern SEXP _cpp11test_gibbs_rcpp2(SEXP, SEXP);
extern SEXP _cpp11test_grow_(SEXP);
extern SEXP _cpp11test_rcpp_grow_(SEXP);
extern SEXP _cpp11test_rcpp_release_(SEXP);
extern SEXP _cpp11test_rcpp_sum_dbl_accumulate_(SEXP);
extern SEXP _cpp11test_rcpp_sum_dbl_for_(SEXP);
extern SEXP _cpp11test_rcpp_sum_dbl_foreach_(SEXP);
extern SEXP _cpp11test_sum_dbl_accumulate_(SEXP);
extern SEXP _cpp11test_sum_dbl_accumulate2_(SEXP);
extern SEXP _cpp11test_sum_dbl_for_(SEXP);
extern SEXP _cpp11test_sum_dbl_for2_(SEXP);
extern SEXP _cpp11test_sum_dbl_for3_(SEXP);
extern SEXP _cpp11test_sum_dbl_foreach_(SEXP);
extern SEXP _cpp11test_sum_dbl_foreach2_(SEXP);
extern SEXP _cpp11test_sum_int_for_(SEXP);
extern SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_cpp11test_cpp11_add_vec_for_",       (DL_FUNC) &_cpp11test_cpp11_add_vec_for_,       2},
    {"_cpp11test_cpp11_insert_",            (DL_FUNC) &_cpp11test_cpp11_insert_,            1},
    {"_cpp11test_cpp11_release_",           (DL_FUNC) &_cpp11test_cpp11_release_,           1},
    {"_cpp11test_cpp11_safe_",              (DL_FUNC) &_cpp11test_cpp11_safe_,              1},
    {"_cpp11test_data_frame_",              (DL_FUNC) &_cpp11test_data_frame_,              0},
    {"_cpp11test_gibbs_cpp",                (DL_FUNC) &_cpp11test_gibbs_cpp,                2},
    {"_cpp11test_gibbs_cpp2",               (DL_FUNC) &_cpp11test_gibbs_cpp2,               2},
    {"_cpp11test_gibbs_rcpp",               (DL_FUNC) &_cpp11test_gibbs_rcpp,               2},
    {"_cpp11test_gibbs_rcpp2",              (DL_FUNC) &_cpp11test_gibbs_rcpp2,              2},
    {"_cpp11test_grow_",                    (DL_FUNC) &_cpp11test_grow_,                    1},
    {"_cpp11test_rcpp_grow_",               (DL_FUNC) &_cpp11test_rcpp_grow_,               1},
    {"_cpp11test_rcpp_release_",            (DL_FUNC) &_cpp11test_rcpp_release_,            1},
    {"_cpp11test_rcpp_sum_dbl_accumulate_", (DL_FUNC) &_cpp11test_rcpp_sum_dbl_accumulate_, 1},
    {"_cpp11test_rcpp_sum_dbl_for_",        (DL_FUNC) &_cpp11test_rcpp_sum_dbl_for_,        1},
    {"_cpp11test_rcpp_sum_dbl_foreach_",    (DL_FUNC) &_cpp11test_rcpp_sum_dbl_foreach_,    1},
    {"_cpp11test_sum_dbl_accumulate_",      (DL_FUNC) &_cpp11test_sum_dbl_accumulate_,      1},
    {"_cpp11test_sum_dbl_accumulate2_",     (DL_FUNC) &_cpp11test_sum_dbl_accumulate2_,     1},
    {"_cpp11test_sum_dbl_for_",             (DL_FUNC) &_cpp11test_sum_dbl_for_,             1},
    {"_cpp11test_sum_dbl_for2_",            (DL_FUNC) &_cpp11test_sum_dbl_for2_,            1},
    {"_cpp11test_sum_dbl_for3_",            (DL_FUNC) &_cpp11test_sum_dbl_for3_,            1},
    {"_cpp11test_sum_dbl_foreach_",         (DL_FUNC) &_cpp11test_sum_dbl_foreach_,         1},
    {"_cpp11test_sum_dbl_foreach2_",        (DL_FUNC) &_cpp11test_sum_dbl_foreach2_,        1},
    {"_cpp11test_sum_int_for_",             (DL_FUNC) &_cpp11test_sum_int_for_,             1},
    {"run_testthat_tests",                  (DL_FUNC) &run_testthat_tests,                  1},
    {NULL, NULL, 0}
};
}



extern "C" void R_init_cpp11test(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  
}

